# 반복문 for
# 지정된 횟수를 반복
# for each 방식 지원
# 전체 시퀀스 데이터 덩어리에서 하니씩 꺼내서 처리하는 방식

a = [1,2,3,4,5]
for i in a : # Q.in 명령어는 알아서 pop을 해주는건가?
    print(i)
else :
    print('정상적으로 반복문 종료')

############################################################
# while문처럼 break, continue 모두 지원

############################################################
a = [(1,2),(3,4),(5,6),(7,8)]
# a에 있는 구성원들을 모두 출력하시오. 출력모양은 자유롭게
for i in a : # 
    print(i[0],i[1]) # 어차피 튜플이면 이렇게 하지말고 각각 받자 

for i,j in a :
    print(i,j)
############################################################
# 딕셔너리를 그냥 for문을 돌리면 key만 나온다
# 딕셔너리의 유용성은 key에 있기 때문에 
a = {
    'name' : 'multi',
    'age' : 10
}
# 값만 출력하시오
for i in a :
    print(i, a[i]) # 딕셔너리의 인덱싱은 항상 이런식으로! 

for v in a.values() :
    print(v)

############################################################
# 연속수 출력
# range() 를 통해서 구현

# 0 ~ 9까지 연속된 수가 나옴
for n in range(10):
    print(n) 
# 1 ~ 4까지 연속된 수가 나옴
for n in range(1,5):
    print(n)

############################################################
# range() 를 이용하여 구구단 구성
# 3단 ~ 6단까지 구구단을 구성하시오
# 출력형태는  3 x 1 = 3

tmp = list() # 빈 그릇을 만들자
for i in range(3,7):
    for j in range(1,10):
        print("%d x %d = %2d" % (i,j,i*j)) # formatting 할때 괄호 하나 더 쓰는거 유의하자
        # 결과를 리스트에 저장하고 싶을때?
        tmp.append(i*j) # 이렇게 할 수도 있지만 아래와 같이 리스트 내포를 통해서 한줄로 가능
    print('='*10) 

print(tmp)

############################################################
# 리스트 내포 : 원하는 결론을 보고 짜기 시작하는거
# 리스트 아니면 딕셔너리
# 나중에 재귀적 호출로 이어짐 
a = [ i*j for i in range(3,7) for j in range(1,10) ] # 원하는 결과를 넣자
print(a)